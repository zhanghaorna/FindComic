package com.zhr.sqlitedao;

import com.zhr.sqlitedao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DOWNLOAD_COMIC_DETAIL.
 */
public class DownloadComicDetail {

    /** Not-null value. */
    private String comicName;
    /** Not-null value. */
    private String chapter;
    private int pageNum;
    private int finishNum;
    /** Not-null value. */
    private String status;
    /** Not-null value. */
    private String url;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DownloadComicDetailDao myDao;

    private DownloadComic downloadComic;
    private String downloadComic__resolvedKey;


    public DownloadComicDetail() {
    }

    public DownloadComicDetail(String comicName) {
        this.comicName = comicName;
    }

    public DownloadComicDetail(String comicName, String chapter, int pageNum, int finishNum, String status, String url) {
        this.comicName = comicName;
        this.chapter = chapter;
        this.pageNum = pageNum;
        this.finishNum = finishNum;
        this.status = status;
        this.url = url;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDownloadComicDetailDao() : null;
    }

    /** Not-null value. */
    public String getComicName() {
        return comicName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setComicName(String comicName) {
        this.comicName = comicName;
    }

    /** Not-null value. */
    public String getChapter() {
        return chapter;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setChapter(String chapter) {
        this.chapter = chapter;
    }

    public int getPageNum() {
        return pageNum;
    }

    public void setPageNum(int pageNum) {
        this.pageNum = pageNum;
    }

    public int getFinishNum() {
        return finishNum;
    }

    public void setFinishNum(int finishNum) {
        this.finishNum = finishNum;
    }

    /** Not-null value. */
    public String getStatus() {
        return status;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStatus(String status) {
        this.status = status;
    }

    /** Not-null value. */
    public String getUrl() {
        return url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUrl(String url) {
        this.url = url;
    }

    /** To-one relationship, resolved on first access. */
    public DownloadComic getDownloadComic() {
        String __key = this.comicName;
        if (downloadComic__resolvedKey == null || downloadComic__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DownloadComicDao targetDao = daoSession.getDownloadComicDao();
            DownloadComic downloadComicNew = targetDao.load(__key);
            synchronized (this) {
                downloadComic = downloadComicNew;
            	downloadComic__resolvedKey = __key;
            }
        }
        return downloadComic;
    }

    public void setDownloadComic(DownloadComic downloadComic) {
        if (downloadComic == null) {
            throw new DaoException("To-one property 'comicName' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.downloadComic = downloadComic;
            comicName = downloadComic.getComicName();
            downloadComic__resolvedKey = comicName;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
