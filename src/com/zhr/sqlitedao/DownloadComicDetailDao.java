package com.zhr.sqlitedao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.zhr.sqlitedao.DownloadComicDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DOWNLOAD_COMIC_DETAIL.
*/
public class DownloadComicDetailDao extends AbstractDao<DownloadComicDetail, String> {

    public static final String TABLENAME = "DOWNLOAD_COMIC_DETAIL";

    /**
     * Properties of entity DownloadComicDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ComicName = new Property(0, String.class, "comicName", true, "COMIC_NAME");
        public final static Property Chapter = new Property(1, String.class, "chapter", false, "CHAPTER");
        public final static Property PageNum = new Property(2, int.class, "pageNum", false, "PAGE_NUM");
        public final static Property FinishNum = new Property(3, int.class, "finishNum", false, "FINISH_NUM");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
    };

    private DaoSession daoSession;

    private Query<DownloadComicDetail> downloadComic_DownloadComicDetailListQuery;

    public DownloadComicDetailDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadComicDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DOWNLOAD_COMIC_DETAIL' (" + //
                "'COMIC_NAME' TEXT PRIMARY KEY NOT NULL ," + // 0: comicName
                "'CHAPTER' TEXT NOT NULL ," + // 1: chapter
                "'PAGE_NUM' INTEGER NOT NULL ," + // 2: pageNum
                "'FINISH_NUM' INTEGER NOT NULL ," + // 3: finishNum
                "'STATUS' TEXT NOT NULL ," + // 4: status
                "'URL' TEXT NOT NULL );"); // 5: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWNLOAD_COMIC_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadComicDetail entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getComicName());
        stmt.bindString(2, entity.getChapter());
        stmt.bindLong(3, entity.getPageNum());
        stmt.bindLong(4, entity.getFinishNum());
        stmt.bindString(5, entity.getStatus());
        stmt.bindString(6, entity.getUrl());
    }

    @Override
    protected void attachEntity(DownloadComicDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadComicDetail readEntity(Cursor cursor, int offset) {
        DownloadComicDetail entity = new DownloadComicDetail( //
            cursor.getString(offset + 0), // comicName
            cursor.getString(offset + 1), // chapter
            cursor.getInt(offset + 2), // pageNum
            cursor.getInt(offset + 3), // finishNum
            cursor.getString(offset + 4), // status
            cursor.getString(offset + 5) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadComicDetail entity, int offset) {
        entity.setComicName(cursor.getString(offset + 0));
        entity.setChapter(cursor.getString(offset + 1));
        entity.setPageNum(cursor.getInt(offset + 2));
        entity.setFinishNum(cursor.getInt(offset + 3));
        entity.setStatus(cursor.getString(offset + 4));
        entity.setUrl(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DownloadComicDetail entity, long rowId) {
        return entity.getComicName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DownloadComicDetail entity) {
        if(entity != null) {
            return entity.getComicName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "downloadComicDetailList" to-many relationship of DownloadComic. */
    public List<DownloadComicDetail> _queryDownloadComic_DownloadComicDetailList(String comicName) {
        synchronized (this) {
            if (downloadComic_DownloadComicDetailListQuery == null) {
                QueryBuilder<DownloadComicDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ComicName.eq(null));
                downloadComic_DownloadComicDetailListQuery = queryBuilder.build();
            }
        }
        Query<DownloadComicDetail> query = downloadComic_DownloadComicDetailListQuery.forCurrentThread();
        query.setParameter(0, comicName);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDownloadComicDao().getAllColumns());
            builder.append(" FROM DOWNLOAD_COMIC_DETAIL T");
            builder.append(" LEFT JOIN DOWNLOAD_COMIC T0 ON T.'COMIC_NAME'=T0.'COMIC_NAME'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DownloadComicDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        DownloadComicDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DownloadComic downloadComic = loadCurrentOther(daoSession.getDownloadComicDao(), cursor, offset);
         if(downloadComic != null) {
            entity.setDownloadComic(downloadComic);
        }

        return entity;    
    }

    public DownloadComicDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DownloadComicDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DownloadComicDetail> list = new ArrayList<DownloadComicDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DownloadComicDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DownloadComicDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
