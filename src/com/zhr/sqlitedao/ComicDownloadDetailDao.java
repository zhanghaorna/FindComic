package com.zhr.sqlitedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhr.sqlitedao.ComicDownloadDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMIC_DOWNLOAD_DETAIL.
*/
public class ComicDownloadDetailDao extends AbstractDao<ComicDownloadDetail, Long> {

    public static final String TABLENAME = "COMIC_DOWNLOAD_DETAIL";

    /**
     * Properties of entity ComicDownloadDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ComicName = new Property(1, String.class, "comicName", false, "COMIC_NAME");
        public final static Property Chapter = new Property(2, String.class, "chapter", false, "CHAPTER");
        public final static Property PageNum = new Property(3, int.class, "pageNum", false, "PAGE_NUM");
        public final static Property FinishNum = new Property(4, int.class, "finishNum", false, "FINISH_NUM");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
    };


    public ComicDownloadDetailDao(DaoConfig config) {
        super(config);
    }
    
    public ComicDownloadDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMIC_DOWNLOAD_DETAIL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'COMIC_NAME' TEXT NOT NULL ," + // 1: comicName
                "'CHAPTER' TEXT NOT NULL ," + // 2: chapter
                "'PAGE_NUM' INTEGER NOT NULL ," + // 3: pageNum
                "'FINISH_NUM' INTEGER NOT NULL ," + // 4: finishNum
                "'STATUS' INTEGER NOT NULL ," + // 5: status
                "'URL' TEXT NOT NULL );"); // 6: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMIC_DOWNLOAD_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ComicDownloadDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getComicName());
        stmt.bindString(3, entity.getChapter());
        stmt.bindLong(4, entity.getPageNum());
        stmt.bindLong(5, entity.getFinishNum());
        stmt.bindLong(6, entity.getStatus());
        stmt.bindString(7, entity.getUrl());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ComicDownloadDetail readEntity(Cursor cursor, int offset) {
        ComicDownloadDetail entity = new ComicDownloadDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // comicName
            cursor.getString(offset + 2), // chapter
            cursor.getInt(offset + 3), // pageNum
            cursor.getInt(offset + 4), // finishNum
            cursor.getInt(offset + 5), // status
            cursor.getString(offset + 6) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ComicDownloadDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComicName(cursor.getString(offset + 1));
        entity.setChapter(cursor.getString(offset + 2));
        entity.setPageNum(cursor.getInt(offset + 3));
        entity.setFinishNum(cursor.getInt(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setUrl(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ComicDownloadDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ComicDownloadDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
