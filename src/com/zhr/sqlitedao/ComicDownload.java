package com.zhr.sqlitedao;

import java.util.List;
import com.zhr.sqlitedao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COMIC_DOWNLOAD.
 */
public class ComicDownload {

    /** Not-null value. */
    private String comicName;
    private int chapterNum;
    private int status;
    /** Not-null value. */
    private java.util.Date downloadDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ComicDownloadDao myDao;

    private List<ComicDownloadDetail> comicDownloadDetailList;

    public ComicDownload() {
    }

    public ComicDownload(String comicName) {
        this.comicName = comicName;
    }

    public ComicDownload(String comicName, int chapterNum, int status, java.util.Date downloadDate) {
        this.comicName = comicName;
        this.chapterNum = chapterNum;
        this.status = status;
        this.downloadDate = downloadDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getComicDownloadDao() : null;
    }

    /** Not-null value. */
    public String getComicName() {
        return comicName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setComicName(String comicName) {
        this.comicName = comicName;
    }

    public int getChapterNum() {
        return chapterNum;
    }

    public void setChapterNum(int chapterNum) {
        this.chapterNum = chapterNum;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    /** Not-null value. */
    public java.util.Date getDownloadDate() {
        return downloadDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDownloadDate(java.util.Date downloadDate) {
        this.downloadDate = downloadDate;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ComicDownloadDetail> getComicDownloadDetailList() {
        if (comicDownloadDetailList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ComicDownloadDetailDao targetDao = daoSession.getComicDownloadDetailDao();
            List<ComicDownloadDetail> comicDownloadDetailListNew = targetDao._queryComicDownload_ComicDownloadDetailList(comicName);
            synchronized (this) {
                if(comicDownloadDetailList == null) {
                    comicDownloadDetailList = comicDownloadDetailListNew;
                }
            }
        }
        return comicDownloadDetailList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComicDownloadDetailList() {
        comicDownloadDetailList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
