package com.zhr.sqlitedao;

import java.util.List;
import com.zhr.sqlitedao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DOWNLOAD_COMIC.
 */
public class DownloadComic {

    /** Not-null value. */
    private String comicName;
    private int chapterNum;
    //下载漫画的集中状态，0表示等待中(初始状态),1表示下载中，2表示已暂停,3表示已完成
    private int status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DownloadComicDao myDao;

    private List<DownloadComicDetail> downloadComicDetailList;

    public DownloadComic() {
    }

    public DownloadComic(String comicName) {
        this.comicName = comicName;
    }

    public DownloadComic(String comicName, int chapterNum, int status) {
        this.comicName = comicName;
        this.chapterNum = chapterNum;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDownloadComicDao() : null;
    }

    /** Not-null value. */
    public String getComicName() {
        return comicName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setComicName(String comicName) {
        this.comicName = comicName;
    }

    public int getChapterNum() {
        return chapterNum;
    }

    public void setChapterNum(int chapterNum) {
        this.chapterNum = chapterNum;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DownloadComicDetail> getDownloadComicDetailList() {
        if (downloadComicDetailList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DownloadComicDetailDao targetDao = daoSession.getDownloadComicDetailDao();
            List<DownloadComicDetail> downloadComicDetailListNew = targetDao._queryDownloadComic_DownloadComicDetailList(comicName);
            synchronized (this) {
                if(downloadComicDetailList == null) {
                    downloadComicDetailList = downloadComicDetailListNew;
                }
            }
        }
        return downloadComicDetailList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDownloadComicDetailList() {
        downloadComicDetailList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
