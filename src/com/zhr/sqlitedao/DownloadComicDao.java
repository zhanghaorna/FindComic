package com.zhr.sqlitedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhr.sqlitedao.DownloadComic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DOWNLOAD_COMIC.
*/
public class DownloadComicDao extends AbstractDao<DownloadComic, String> {

    public static final String TABLENAME = "DOWNLOAD_COMIC";

    /**
     * Properties of entity DownloadComic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ComicName = new Property(0, String.class, "comicName", true, "COMIC_NAME");
        public final static Property ChapterNum = new Property(1, int.class, "chapterNum", false, "CHAPTER_NUM");
        public final static Property Status = new Property(2, int.class, "status", false, "STATUS");
    };

    private DaoSession daoSession;


    public DownloadComicDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadComicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DOWNLOAD_COMIC' (" + //
                "'COMIC_NAME' TEXT PRIMARY KEY NOT NULL ," + // 0: comicName
                "'CHAPTER_NUM' INTEGER NOT NULL ," + // 1: chapterNum
                "'STATUS' INTEGER NOT NULL );"); // 2: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWNLOAD_COMIC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadComic entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getComicName());
        stmt.bindLong(2, entity.getChapterNum());
        stmt.bindLong(3, entity.getStatus());
    }

    @Override
    protected void attachEntity(DownloadComic entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadComic readEntity(Cursor cursor, int offset) {
        DownloadComic entity = new DownloadComic( //
            cursor.getString(offset + 0), // comicName
            cursor.getInt(offset + 1), // chapterNum
            cursor.getInt(offset + 2) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadComic entity, int offset) {
        entity.setComicName(cursor.getString(offset + 0));
        entity.setChapterNum(cursor.getInt(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DownloadComic entity, long rowId) {
        return entity.getComicName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DownloadComic entity) {
        if(entity != null) {
            return entity.getComicName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
